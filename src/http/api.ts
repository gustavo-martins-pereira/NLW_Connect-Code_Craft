/**
 * Generated by orval v7.6.0 🍺
 * Do not edit manually.
 * NLW Connect
 * OpenAPI spec version: 0.1
 */
export type SubscribeToEventBody = {
  name: string;
  email: string;
  /** @nullable */
  referrer?: string | null;
};

export type SubscribeToEvent201 = {
  subscriberId: string;
};

/**
 * @nullable
 */
export type AccessInviteLink301 = typeof AccessInviteLink301[keyof typeof AccessInviteLink301] | null;


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AccessInviteLink301 = {
  null: 'null',
} as const;

export type GetRanking200RankingItem = {
  id: string;
  name: string;
  score: number;
};

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[];
};

export type GetSubscriberInviteCount200 = {
  count: number;
};

export type GetSubscriberInviteClicks200 = {
  count: number;
};

export type GetSubscriberRankingPosition200 = {
  /** @nullable */
  position: number | null;
};

/**
 * @summary Subscribe to event
 */
export type subscribeToEventResponse201 = {
  data: SubscribeToEvent201
  status: 201
}
    
export type subscribeToEventResponseComposite = subscribeToEventResponse201;
    
export type subscribeToEventResponse = subscribeToEventResponseComposite & {
  headers: Headers;
}

export const getSubscribeToEventUrl = () => {


  

  return `http://localhost:3333/subscriptions`
}

export const subscribeToEvent = async (subscribeToEventBody: SubscribeToEventBody, options?: RequestInit): Promise<subscribeToEventResponse> => {
  
  const res = await fetch(getSubscribeToEventUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      subscribeToEventBody,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: subscribeToEventResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as subscribeToEventResponse
}



/**
 * @summary Access invite link
 */
export type accessInviteLinkResponse301 = {
  data: AccessInviteLink301
  status: 301
}
    
export type accessInviteLinkResponseComposite = accessInviteLinkResponse301;
    
export type accessInviteLinkResponse = accessInviteLinkResponseComposite & {
  headers: Headers;
}

export const getAccessInviteLinkUrl = (subscriberId: string,) => {


  

  return `http://localhost:3333/invites/${subscriberId}`
}

export const accessInviteLink = async (subscriberId: string, options?: RequestInit): Promise<accessInviteLinkResponse> => {
  
  const res = await fetch(getAccessInviteLinkUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: accessInviteLinkResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as accessInviteLinkResponse
}



/**
 * @summary Get ranking
 */
export type getRankingResponse200 = {
  data: GetRanking200
  status: 200
}
    
export type getRankingResponseComposite = getRankingResponse200;
    
export type getRankingResponse = getRankingResponseComposite & {
  headers: Headers;
}

export const getGetRankingUrl = () => {


  

  return `http://localhost:3333/ranking`
}

export const getRanking = async ( options?: RequestInit): Promise<getRankingResponse> => {
  
  const res = await fetch(getGetRankingUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getRankingResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getRankingResponse
}



/**
 * @summary Get subscriber ranking invites count
 */
export type getSubscriberInviteCountResponse200 = {
  data: GetSubscriberInviteCount200
  status: 200
}
    
export type getSubscriberInviteCountResponseComposite = getSubscriberInviteCountResponse200;
    
export type getSubscriberInviteCountResponse = getSubscriberInviteCountResponseComposite & {
  headers: Headers;
}

export const getGetSubscriberInviteCountUrl = (subscriberId: string,) => {


  

  return `http://localhost:3333/subscribers/${subscriberId}/ranking/count`
}

export const getSubscriberInviteCount = async (subscriberId: string, options?: RequestInit): Promise<getSubscriberInviteCountResponse> => {
  
  const res = await fetch(getGetSubscriberInviteCountUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSubscriberInviteCountResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getSubscriberInviteCountResponse
}



/**
 * @summary Get subscriber ranking invites clicks count
 */
export type getSubscriberInviteClicksResponse200 = {
  data: GetSubscriberInviteClicks200
  status: 200
}
    
export type getSubscriberInviteClicksResponseComposite = getSubscriberInviteClicksResponse200;
    
export type getSubscriberInviteClicksResponse = getSubscriberInviteClicksResponseComposite & {
  headers: Headers;
}

export const getGetSubscriberInviteClicksUrl = (subscriberId: string,) => {


  

  return `http://localhost:3333/subscribers/${subscriberId}/ranking/clicks`
}

export const getSubscriberInviteClicks = async (subscriberId: string, options?: RequestInit): Promise<getSubscriberInviteClicksResponse> => {
  
  const res = await fetch(getGetSubscriberInviteClicksUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSubscriberInviteClicksResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getSubscriberInviteClicksResponse
}



/**
 * @summary Get subscriber ranking position
 */
export type getSubscriberRankingPositionResponse200 = {
  data: GetSubscriberRankingPosition200
  status: 200
}
    
export type getSubscriberRankingPositionResponseComposite = getSubscriberRankingPositionResponse200;
    
export type getSubscriberRankingPositionResponse = getSubscriberRankingPositionResponseComposite & {
  headers: Headers;
}

export const getGetSubscriberRankingPositionUrl = (subscriberId: string,) => {


  

  return `http://localhost:3333/subscribers/${subscriberId}/ranking/position`
}

export const getSubscriberRankingPosition = async (subscriberId: string, options?: RequestInit): Promise<getSubscriberRankingPositionResponse> => {
  
  const res = await fetch(getGetSubscriberRankingPositionUrl(subscriberId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSubscriberRankingPositionResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getSubscriberRankingPositionResponse
}
